{
  "uid" : "7cabfcd5bb31e0da",
  "name" : "invoke with custom fetch wrong method",
  "fullName" : "invoke with custom fetch wrong method",
  "historyId" : "c311cd18dbf8f64bc848008a36b6f903",
  "time" : {
    "start" : 1650270902916,
    "stop" : 1650270902938,
    "duration" : 22
  },
  "description" : "\n### Test\n```typescript\n() =>\n  __awaiter(void 0, void 0, void 0, function* () {\n    (0, jest_custom_reporter_1.log)(\"create FunctionsClient\");\n    const fclient = new index_1.FunctionsClient(\n      `http://localhost:${relay.container.getMappedPort(8081)}`,\n      {\n        customFetch: (0, fetch_1.getCustomFetch)(\n          `http://localhost:${relay.container.getMappedPort(8081)}/${\"hello\"}`,\n          {\n            method: \"GET\",\n            headers: {\n              Authorization: `Bearer ${apiKey}`,\n            },\n          }\n        ),\n      }\n    );\n    (0, jest_custom_reporter_1.log)(\"invoke hello\");\n    const { data, error } = yield fclient.invoke(\"\", { responseType: \"text\" });\n    (0, jest_custom_reporter_1.log)(\"check error\");\n\n    expect(error).not.toBeNull();\n    (0,\n    jest_custom_reporter_1.log)(`assert ${error === null || error === void 0 ? void 0 : error.message} is equal to 'Only POST and OPTIONS requests are supported'`);\n    expect(error === null || error === void 0 ? void 0 : error.message).toEqual(\n      \"Only POST and OPTIONS requests are supported\"\n    );\n    expect(data).toBeNull();\n  });\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">() =&gt;\n  __awaiter(void 0, void 0, void 0, function* () {\n    (0, jest_custom_reporter_1.log)(&quot;create FunctionsClient&quot;);\n    const fclient = new index_1.FunctionsClient(\n      `http://localhost:${relay.container.getMappedPort(8081)}`,\n      {\n        customFetch: (0, fetch_1.getCustomFetch)(\n          `http://localhost:${relay.container.getMappedPort(8081)}/${&quot;hello&quot;}`,\n          {\n            method: &quot;GET&quot;,\n            headers: {\n              Authorization: `Bearer ${apiKey}`,\n            },\n          }\n        ),\n      }\n    );\n    (0, jest_custom_reporter_1.log)(&quot;invoke hello&quot;);\n    const { data, error } = yield fclient.invoke(&quot;&quot;, { responseType: &quot;text&quot; });\n    (0, jest_custom_reporter_1.log)(&quot;check error&quot;);\n\n    expect(error).not.toBeNull();\n    (0,\n    jest_custom_reporter_1.log)(`assert ${error === null || error === void 0 ? void 0 : error.message} is equal to 'Only POST and OPTIONS requests are supported'`);\n    expect(error === null || error === void 0 ? void 0 : error.message).toEqual(\n      &quot;Only POST and OPTIONS requests are supported&quot;\n    );\n    expect(data).toBeNull();\n  });\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ {
      "name" : "read function body",
      "time" : {
        "start" : 1650270899747,
        "stop" : 1650270899747,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "function body",
      "time" : {
        "start" : 1650270899747,
        "stop" : 1650270899747,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "65b67d1edd7f185",
        "name" : "text/plain",
        "source" : "65b67d1edd7f185.txt",
        "type" : "text/plain",
        "size" : 103
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "add network",
      "time" : {
        "start" : 1650270899748,
        "stop" : 1650270899748,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "create relay hello-8bvD4",
      "time" : {
        "start" : 1650270900371,
        "stop" : 1650270900371,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "start relay hello-8bvD4",
      "time" : {
        "start" : 1650270900372,
        "stop" : 1650270900372,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "check function is healthy: hello-8bvD4",
      "time" : {
        "start" : 1650270900946,
        "stop" : 1650270900946,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "function started to serve: hello-8bvD4",
      "time" : {
        "start" : 1650270902489,
        "stop" : 1650270902489,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\n() =>\n  __awaiter(void 0, void 0, void 0, function* () {\n    (0, jest_custom_reporter_1.log)(\"create FunctionsClient\");\n    const fclient = new index_1.FunctionsClient(\n      `http://localhost:${relay.container.getMappedPort(8081)}`,\n      {\n        customFetch: (0, fetch_1.getCustomFetch)(\n          `http://localhost:${relay.container.getMappedPort(8081)}/${\"hello\"}`,\n          {\n            method: \"GET\",\n            headers: {\n              Authorization: `Bearer ${apiKey}`,\n            },\n          }\n        ),\n      }\n    );\n    (0, jest_custom_reporter_1.log)(\"invoke hello\");\n    const { data, error } = yield fclient.invoke(\"\", { responseType: \"text\" });\n    (0, jest_custom_reporter_1.log)(\"check error\");\n\n    expect(error).not.toBeNull();\n    (0,\n    jest_custom_reporter_1.log)(`assert ${error === null || error === void 0 ? void 0 : error.message} is equal to 'Only POST and OPTIONS requests are supported'`);\n    expect(error === null || error === void 0 ? void 0 : error.message).toEqual(\n      \"Only POST and OPTIONS requests are supported\"\n    );\n    expect(data).toBeNull();\n  });\n\n```\n",
    "status" : "passed",
    "steps" : [ {
      "name" : "create FunctionsClient",
      "time" : {
        "start" : 1650270902929,
        "stop" : 1650270902929,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "invoke hello",
      "time" : {
        "start" : 1650270902929,
        "stop" : 1650270902929,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "check error",
      "time" : {
        "start" : 1650270902937,
        "stop" : 1650270902937,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "assert Only POST and OPTIONS requests are supported is equal to 'Only POST and OPTIONS requests are supported'",
      "time" : {
        "start" : 1650270902938,
        "stop" : 1650270902938,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "fetch"
  }, {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "package",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "spec"
  }, {
    "name" : "subSuite",
    "value" : "hello.spec.ts"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "7cabfcd5bb31e0da.json",
  "parameterValues" : [ ]
}