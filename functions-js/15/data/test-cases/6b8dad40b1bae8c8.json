{
  "uid" : "6b8dad40b1bae8c8",
  "name" : "invoke mirror with body formData",
  "fullName" : "invoke mirror with body formData",
  "historyId" : "640a586b18977f5d6306ca23c809a339",
  "time" : {
    "start" : 1650281366186,
    "stop" : 1650281366244,
    "duration" : 58
  },
  "description" : "\n### Test\n```typescript\n() =>\n  __awaiter(void 0, void 0, void 0, function* () {\n    var _d;\n\n    (0, jest_custom_reporter_1.log)(\"create FunctionsClient\");\n    const fclient = new index_1.FunctionsClient(\n      `http://localhost:${relay.container.getMappedPort(8081)}`\n    );\n    (0,\n    jest_custom_reporter_1.attach)(\"setAuth\", apiKey, allure_js_commons_1.ContentType.TEXT);\n    fclient.setAuth(apiKey);\n    (0, jest_custom_reporter_1.log)(\"invoke mirror\");\n    var form = new URLSearchParams();\n    form.append((0, nanoid_1.nanoid)(5), (0, nanoid_1.nanoid)(10));\n    form.append((0, nanoid_1.nanoid)(7), (0, nanoid_1.nanoid)(5));\n    form.append((0, nanoid_1.nanoid)(15), (0, nanoid_1.nanoid)());\n    const { data, error } = yield fclient.invoke(\"mirror\", {\n      responseType: \"json\",\n      body: form,\n      headers: {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n        \"response-type\": \"form\",\n      },\n    });\n    (0, jest_custom_reporter_1.log)(\"assert no error\");\n\n    expect(error).toBeNull();\n    const body = [];\n    for (const e of form.entries()) {\n      body.push(e);\n    }\n    const expected = {\n      url: \"http://localhost:8000/mirror\",\n      method: \"POST\",\n      headers:\n        (_d = data === null || data === void 0 ? void 0 : data.headers) !==\n          null && _d !== void 0\n          ? _d\n          : [],\n      body: body,\n    };\n    (0,\n    jest_custom_reporter_1.attach)(\"check data from function\", `expected: ${JSON.stringify(expected)}\\n actual: ${JSON.stringify(data)}`, allure_js_commons_1.ContentType.TEXT);\n    expect(data).toEqual(expected);\n  });\n\n```\n",
  "descriptionHtml" : "<h3>Test</h3>\n<pre><code class=\"language-typescript\">() =&gt;\n  __awaiter(void 0, void 0, void 0, function* () {\n    var _d;\n\n    (0, jest_custom_reporter_1.log)(&quot;create FunctionsClient&quot;);\n    const fclient = new index_1.FunctionsClient(\n      `http://localhost:${relay.container.getMappedPort(8081)}`\n    );\n    (0,\n    jest_custom_reporter_1.attach)(&quot;setAuth&quot;, apiKey, allure_js_commons_1.ContentType.TEXT);\n    fclient.setAuth(apiKey);\n    (0, jest_custom_reporter_1.log)(&quot;invoke mirror&quot;);\n    var form = new URLSearchParams();\n    form.append((0, nanoid_1.nanoid)(5), (0, nanoid_1.nanoid)(10));\n    form.append((0, nanoid_1.nanoid)(7), (0, nanoid_1.nanoid)(5));\n    form.append((0, nanoid_1.nanoid)(15), (0, nanoid_1.nanoid)());\n    const { data, error } = yield fclient.invoke(&quot;mirror&quot;, {\n      responseType: &quot;json&quot;,\n      body: form,\n      headers: {\n        &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;,\n        &quot;response-type&quot;: &quot;form&quot;,\n      },\n    });\n    (0, jest_custom_reporter_1.log)(&quot;assert no error&quot;);\n\n    expect(error).toBeNull();\n    const body = [];\n    for (const e of form.entries()) {\n      body.push(e);\n    }\n    const expected = {\n      url: &quot;http://localhost:8000/mirror&quot;,\n      method: &quot;POST&quot;,\n      headers:\n        (_d = data === null || data === void 0 ? void 0 : data.headers) !==\n          null &amp;&amp; _d !== void 0\n          ? _d\n          : [],\n      body: body,\n    };\n    (0,\n    jest_custom_reporter_1.attach)(&quot;check data from function&quot;, `expected: ${JSON.stringify(expected)}\\n actual: ${JSON.stringify(data)}`, allure_js_commons_1.ContentType.TEXT);\n    expect(data).toEqual(expected);\n  });\n\n</code></pre>\n",
  "status" : "passed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ {
      "name" : "read function body",
      "time" : {
        "start" : 1650281358751,
        "stop" : 1650281358751,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "function body",
      "time" : {
        "start" : 1650281358751,
        "stop" : 1650281358751,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d8e02f864ad2ca01",
        "name" : "text/plain",
        "source" : "d8e02f864ad2ca01.txt",
        "type" : "text/plain",
        "size" : 1483
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "add network",
      "time" : {
        "start" : 1650281358752,
        "stop" : 1650281358752,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "create relay mirror-7CZMQ",
      "time" : {
        "start" : 1650281360338,
        "stop" : 1650281360338,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "start relay mirror-7CZMQ",
      "time" : {
        "start" : 1650281360338,
        "stop" : 1650281360338,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "check function is healthy: mirror-7CZMQ",
      "time" : {
        "start" : 1650281364327,
        "stop" : 1650281364328,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "function started to serve: mirror-7CZMQ",
      "time" : {
        "start" : 1650281365874,
        "stop" : 1650281365874,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n### Test\n```typescript\n() =>\n  __awaiter(void 0, void 0, void 0, function* () {\n    var _d;\n\n    (0, jest_custom_reporter_1.log)(\"create FunctionsClient\");\n    const fclient = new index_1.FunctionsClient(\n      `http://localhost:${relay.container.getMappedPort(8081)}`\n    );\n    (0,\n    jest_custom_reporter_1.attach)(\"setAuth\", apiKey, allure_js_commons_1.ContentType.TEXT);\n    fclient.setAuth(apiKey);\n    (0, jest_custom_reporter_1.log)(\"invoke mirror\");\n    var form = new URLSearchParams();\n    form.append((0, nanoid_1.nanoid)(5), (0, nanoid_1.nanoid)(10));\n    form.append((0, nanoid_1.nanoid)(7), (0, nanoid_1.nanoid)(5));\n    form.append((0, nanoid_1.nanoid)(15), (0, nanoid_1.nanoid)());\n    const { data, error } = yield fclient.invoke(\"mirror\", {\n      responseType: \"json\",\n      body: form,\n      headers: {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n        \"response-type\": \"form\",\n      },\n    });\n    (0, jest_custom_reporter_1.log)(\"assert no error\");\n\n    expect(error).toBeNull();\n    const body = [];\n    for (const e of form.entries()) {\n      body.push(e);\n    }\n    const expected = {\n      url: \"http://localhost:8000/mirror\",\n      method: \"POST\",\n      headers:\n        (_d = data === null || data === void 0 ? void 0 : data.headers) !==\n          null && _d !== void 0\n          ? _d\n          : [],\n      body: body,\n    };\n    (0,\n    jest_custom_reporter_1.attach)(\"check data from function\", `expected: ${JSON.stringify(expected)}\\n actual: ${JSON.stringify(data)}`, allure_js_commons_1.ContentType.TEXT);\n    expect(data).toEqual(expected);\n  });\n\n```\n",
    "status" : "passed",
    "steps" : [ {
      "name" : "create FunctionsClient",
      "time" : {
        "start" : 1650281366225,
        "stop" : 1650281366225,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "setAuth",
      "time" : {
        "start" : 1650281366225,
        "stop" : 1650281366225,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5d01790cfaa48cba",
        "name" : "text/plain",
        "source" : "5d01790cfaa48cba.txt",
        "type" : "text/plain",
        "size" : 124
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "invoke mirror",
      "time" : {
        "start" : 1650281366226,
        "stop" : 1650281366226,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "assert no error",
      "time" : {
        "start" : 1650281366243,
        "stop" : 1650281366243,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "check data from function",
      "time" : {
        "start" : 1650281366244,
        "stop" : 1650281366244,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "8027bb9e516699ff",
        "name" : "text/plain",
        "source" : "8027bb9e516699ff.txt",
        "type" : "text/plain",
        "size" : 1264
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  },
  "afterStages" : [ {
    "time" : { },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "body"
  }, {
    "name" : "thread",
    "value" : "1"
  }, {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "package",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "spec"
  }, {
    "name" : "subSuite",
    "value" : "params.spec.ts"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 3,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "1811040325f8112d",
        "reportUrl" : "https://supabase.github.io/test-reports/functions-js/13//#testresult/1811040325f8112d",
        "status" : "passed",
        "time" : {
          "start" : 1650270919372,
          "stop" : 1650270919418,
          "duration" : 46
        }
      }, {
        "uid" : "8b4b152a59d61d64",
        "reportUrl" : "https://supabase.github.io/test-reports/functions-js/14//#testresult/8b4b152a59d61d64",
        "status" : "passed",
        "time" : {
          "start" : 1650270898865,
          "stop" : 1650270898904,
          "duration" : 39
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "6b8dad40b1bae8c8.json",
  "parameterValues" : [ ]
}